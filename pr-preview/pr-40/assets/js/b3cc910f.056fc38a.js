"use strict";(self.webpackChunkgolden_forest_website=self.webpackChunkgolden_forest_website||[]).push([["2146"],{10802:function(e,t,n){n.r(t),n.d(t,{default:()=>h,frontMatter:()=>l,metadata:()=>s,assets:()=>a,toc:()=>o,contentTitle:()=>c});var s=JSON.parse('{"id":"Shell-Script/bash-unit-testing","title":"Unit testing","description":"Sample script","source":"@site/docs/Shell-Script/bash-unit-testing.md","sourceDirName":"Shell-Script","slug":"/Shell-Script/bash-unit-testing","permalink":"/pr-preview/pr-40/docs/Shell-Script/bash-unit-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/sdelrio/golden-forest/edit/master/docs/Shell-Script/bash-unit-testing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"OWASP","permalink":"/pr-preview/pr-40/docs/Security/owasp"},"next":{"title":"Charm.sh","permalink":"/pr-preview/pr-40/docs/Shell-Script/charm"}}'),i=n("85893"),r=n("50065");let l={},c="Unit testing",a={},o=[{value:"Sample script",id:"sample-script",level:2},{value:"Dockerfile runtime",id:"dockerfile-runtime",level:2},{value:"Test script",id:"test-script",level:2},{value:"Dockerfile.test",id:"dockerfiletest",level:2},{value:"References",id:"references",level:2}];function u(e){let t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"unit-testing",children:"Unit testing"})}),"\n",(0,i.jsx)(t.h2,{id:"sample-script",children:"Sample script"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"#!/bin/bash\n\nAMOUNT=$(ls crashdump | wc -l)\n\nif [[ AMOUNT -ge 3 ]]; then\n  mail -s \u201CAlert: Too many files: $AMOUNT\u201D alerts@toomanycrashes.com\nfi\n"})}),"\n",(0,i.jsx)(t.h2,{id:"dockerfile-runtime",children:"Dockerfile runtime"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-Dockerfile",children:'FROM debian:stretch-slim\n\nRUN mkdir /script\nCOPY script.sh /script/script.sh\nRUN chmod +x /script/script.sh\n\nENTRYPOINT [ "/script/script.sh" ]\n'})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Build image"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"docker build -t scriptimage:latest .\n"})}),"\n",(0,i.jsx)(t.h2,{id:"test-script",children:"Test script"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'#!/bin/bash\n\nshopt -s expand_aliases\n\n# Execute before all tests\nalias mail="echo \'alert send\' > output;false"\necho \'Test results for our image/script\' > results.txt\ncount=0\n\n# test 1 (less than or equal)\n# Execute before test 1\nalias ls="echo -e \'file1\\nfile2\'"\necho \'No output\' > output\n\n# Run script\n. /script/script.sh\n\n# Check result (assert)\n((count=count+1))\nif [[ $(< output) == \'alert send\' ]]; then\n  echo "$count. FAIL: Alert mail send while less than three files" >> results.txt\nelse\n  echo "$count. PASS: Alert mail not send" >> results.txt\nfi\n\n# Prepare test 2 (greater than or equal)\nalias ls="echo -e \'file1\\nfile2\\nfile3\\nfile4\'"\necho \'No output\' > output\n\n# Run script\n. /script/script.sh\n\n# Check result (assert)\n((count=count+1))\nif [[ $(< output) == \'alert send\' ]]; then\n  echo "$count. PASS: Alert mail send" >> results.txt\nelse\n  echo "$count. FAIL: Did not send Alert mail" >> results.txt\nfi\n\n# After all\nunalias ls\nunalias mail\n\n# Display test results\ncat results.txt\n\n# Return exit 1 if FAIL found\nif grep -q "FAIL" results.txt; then\n  echo "exiting with exit 1"\n  exit 1\nfi\n\n'})}),"\n",(0,i.jsx)(t.h2,{id:"dockerfiletest",children:"Dockerfile.test"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-Dockerfile",children:'FROM scriptimage:latest\n\nCOPY test.sh /script/test.sh\nRUN chmod +x /script/test.sh\n\nENTRYPOINT [ "/script/test.sh" ]\n'})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Build & run test image"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"docker build -t unittest:latest -f Dockerfile.test .\ndocker run unittest:latest\n"})}),"\n",(0,i.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://www.flowfactor.be/unit-testing-bash-scripts-the-cloud-native-way/",children:"Unit testing bash scripts the cloud-native way"})}),"\n"]})]})}function h(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},50065:function(e,t,n){n.d(t,{Z:function(){return c},a:function(){return l}});var s=n(67294);let i={},r=s.createContext(i);function l(e){let t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);