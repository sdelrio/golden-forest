"use strict";(self.webpackChunkgolden_forest_website=self.webpackChunkgolden_forest_website||[]).push([["6346"],{65330:function(e,r,t){t.r(r),t.d(r,{default:()=>u,frontMatter:()=>s,metadata:()=>i,assets:()=>c,toc:()=>a,contentTitle:()=>l});var i=JSON.parse('{"id":"Containers/Docker/docker-multi-platform-build","title":"Docker build multi-platform","description":"How it works?","source":"@site/docs/Containers/Docker/docker-multi-platform-build.md","sourceDirName":"Containers/Docker","slug":"/Containers/Docker/docker-multi-platform-build","permalink":"/pr-preview/pr-46/docs/Containers/Docker/docker-multi-platform-build","draft":false,"unlisted":false,"editUrl":"https://github.com/sdelrio/golden-forest/edit/master/docs/Containers/Docker/docker-multi-platform-build.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Docker Desktop for mac","permalink":"/pr-preview/pr-46/docs/Containers/Docker/docker-mac"},"next":{"title":"Docker Hub Rate Limits","permalink":"/pr-preview/pr-46/docs/Containers/Docker/docker-rate-limit"}}'),n=t("85893"),o=t("50065");let s={},l="Docker build multi-platform",c={},a=[{value:"How it works?",id:"how-it-works",level:2},{value:"Stages",id:"stages",level:2},{value:"Stage 1: ARM",id:"stage-1-arm",level:3},{value:"Stage 2: x86",id:"stage-2-x86",level:3}];function d(e){let r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"docker-build-multi-platform",children:"Docker build multi-platform"})}),"\n",(0,n.jsx)(r.h2,{id:"how-it-works",children:"How it works?"}),"\n",(0,n.jsxs)(r.p,{children:["The easiest way to use multi-platform functionality in Docker is to invoke it from the command line.\nUsing the ",(0,n.jsx)(r.code,{children:"docker buildx"}),", we can tap into new beta functionalities."]}),"\n",(0,n.jsxs)(r.p,{children:["By running docker ``buildx build --platform linux/arm/v7 -t arm-build",(0,n.jsx)(r.code,{children:". This command builds the docker image as per the "}),"Dockerfile",(0,n.jsx)(r.code,{children:"in the current directory using ARMv7 emulation. Behind the scenes, Docker runs the whole Docker build process in a QEMU virtualized environment (qemu-user-static to be precise). By doing this, the complexity of setting up a custom VM is removed. Once built, we can even use"}),"docker run` to launch containers in ARMv7 mode automagically."]}),"\n",(0,n.jsx)(r.h2,{id:"stages",children:"Stages"}),"\n",(0,n.jsx)(r.h3,{id:"stage-1-arm",children:"Stage 1: ARM"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"FROM --platform=linux/arm/v7 balenalib/rpi-raspbian:buster as builder\n"})}),"\n",(0,n.jsx)(r.p,{children:"This part is running using QEMU"}),"\n",(0,n.jsx)(r.h3,{id:"stage-2-x86",children:"Stage 2: x86"}),"\n",(0,n.jsx)(r.p,{children:"Once we installed our dependencies we can switch to native x86 arch."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"FROM --platform=linux/amd64 debian:buster\n"})}),"\n",(0,n.jsx)(r.p,{children:"After we have switched over to x86, we can copy files from the previous step. We do this in order to create a sysroot that we can use for Qt. We complete this step by running the following commands:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"RUN mkdir -p /sysroot/usr /sysroot/opt /sysroot/lib\nCOPY --from=builder /lib/ /sysroot/lib/\nCOPY --from=builder /usr/include/ /sysroot/usr/include/\nCOPY --from=builder /usr/lib/ /sysroot/usr/lib/\nCOPY --from=builder /opt/vc/ sysroot/opt/vc/\n"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.a,{href:"https://www.docker.com/blog/compiling-qt-with-docker-multi-stage-and-multi-platform/",children:"Compiling Qt with Docker multi-stage and multi-platform"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"https://github.com/Screenly/screenly-ose/blob/master/webview/Dockerfile",children:"Dockerfile for QT multi-stage"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"https://github.com/Screenly/screenly-ose/blob/master/webview/build_qt5.sh",children:"build QT script"})}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"https://daniel-dc.medium.com/build-a-multi-arch-docker-image-with-vagrant-d903355dace5",children:"Build a multi-architecture docker image with Vagrant"})}),"\n"]})]})}function u(e={}){let{wrapper:r}={...(0,o.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},50065:function(e,r,t){t.d(r,{Z:function(){return l},a:function(){return s}});var i=t(67294);let n={},o=i.createContext(n);function s(e){let r=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),i.createElement(o.Provider,{value:r},e.children)}}}]);