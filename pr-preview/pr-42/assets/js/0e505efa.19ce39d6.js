"use strict";(self.webpackChunkgolden_forest_website=self.webpackChunkgolden_forest_website||[]).push([["4107"],{52295:function(e,n,i){i.r(n),i.d(n,{default:()=>u,frontMatter:()=>r,metadata:()=>s,assets:()=>l,toc:()=>d,contentTitle:()=>a});var s=JSON.parse('{"id":"OS/GNU-Linux/NixOS/install-zfs","title":"NixOS root on ZFS","description":"Requirements inside VM","source":"@site/docs/OS/GNU-Linux/NixOS/install-zfs.md","sourceDirName":"OS/GNU-Linux/NixOS","slug":"/OS/GNU-Linux/NixOS/install-zfs","permalink":"/pr-preview/pr-42/docs/OS/GNU-Linux/NixOS/install-zfs","draft":false,"unlisted":false,"editUrl":"https://github.com/sdelrio/golden-forest/edit/master/docs/OS/GNU-Linux/NixOS/install-zfs.md","tags":[{"inline":true,"label":"nixos","permalink":"/pr-preview/pr-42/docs/tags/nixos"},{"inline":true,"label":"zfs","permalink":"/pr-preview/pr-42/docs/tags/zfs"},{"inline":true,"label":"vm","permalink":"/pr-preview/pr-42/docs/tags/vm"},{"inline":true,"label":"script","permalink":"/pr-preview/pr-42/docs/tags/script"}],"version":"current","frontMatter":{"title":"NixOS root on ZFS","date":20231014,"author":"sdelrio","tags":["nixos","zfs","vm","script"]},"sidebar":"tutorialSidebar","previous":{"title":"Installing NixOS","permalink":"/pr-preview/pr-42/docs/OS/GNU-Linux/NixOS/install-system"},"next":{"title":"NixOS configs and tutorials","permalink":"/pr-preview/pr-42/docs/OS/GNU-Linux/NixOS/nix-configs"}}'),t=i("85893"),o=i("50065");let r={title:"NixOS root on ZFS",date:0x134b366,author:"sdelrio",tags:["nixos","zfs","vm","script"]},a="NixOS Root on ZFS",l={},d=[{value:"Requirements inside VM",id:"requirements-inside-vm",level:2},{value:"Check the disk with id",id:"check-the-disk-with-id",level:3},{value:"Sample partition schema",id:"sample-partition-schema",level:2},{value:"Without swap:",id:"without-swap",level:3},{value:"With swap",id:"with-swap",level:3},{value:"Destroy partitions",id:"destroy-partitions",level:2},{value:"View block IDs for zfs_members",id:"view-block-ids-for-zfs_members",level:3},{value:"Wipe script",id:"wipe-script",level:3},{value:"Console and locale for Spanish",id:"console-and-locale-for-spanish",level:3},{value:"References",id:"references",level:2},{value:"Default configuration",id:"default-configuration",level:2},{value:"Configuration.nix",id:"configurationnix",level:3},{value:"Hardware generator",id:"hardware-generator",level:3}];function c(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"nixos-root-on-zfs",children:"NixOS Root on ZFS"})}),"\n",(0,t.jsx)(n.h2,{id:"requirements-inside-vm",children:"Requirements inside VM"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Make sure the disk has some serial number so we created the ",(0,t.jsx)(n.code,{children:"disk/by-id"})," device. In virt manager you can do this into VirtIO Disk -> advanced options -> Serial"]}),"\n",(0,t.jsx)(n.li,{children:"Make sure you UEFI bios enabled (you will need to download OVMF). You can add it through xml configuration if your virt manager doesn't support it:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'  [os](os)\n    [type arch="x86_64" machine="pc-q35-5.0">hvm</type](type arch="x86_64" machine="pc-q35-5.0">hvm</type)\n    [loader readonly="yes" type="pflash">/usr/share/OVMF/OVMF_CODE.fd</loader](loader readonly="yes" type="pflash">/usr/share/OVMF/OVMF_CODE.fd</loader)\n    [nvram>/var/lib/libvirt/qemu/nvram/NixOSVM.fd</nvram](nvram>/var/lib/libvirt/qemu/nvram/NixOSVM.fd</nvram)\n    [bootmenu enable="no"/](bootmenu enable="no"/)\n  [/os](/os)\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["If using Wayland or want 3D acel ",(0,t.jsx)(n.a,{href:"https://www.youtube.com/watch?v=6-IpJLYjc0M",children:"configure"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Video QXL:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Model: virtio"}),"\n",(0,t.jsx)(n.li,{children:"3D acelration: checked"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Display Spice:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Type: spice server"}),"\n",(0,t.jsx)(n.li,{children:"Listen: none"}),"\n",(0,t.jsx)(n.li,{children:"OpenGL: on"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"check-the-disk-with-id",children:"Check the disk with id"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"[root@nixos:~]# find /dev/disk/by-id/\n/dev/disk/by-id/\n/dev/disk/by-id/ata-QEMU_DVD-ROM_QM00001\n/dev/disk/by-id/virtio-abcdef0123456789\n"})}),"\n",(0,t.jsx)(n.h2,{id:"sample-partition-schema",children:"Sample partition schema"}),"\n",(0,t.jsx)(n.h3,{id:"without-swap",children:"Without swap:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"Number  Start   End     Size    File system  Name   Flags\n 4      1049kB  2097kB  1049kB               BIOS   bios_grub, legacy_boot\n 1      2097kB  1074MB  1072MB  fat32        EFI    boot, esp\n 2      1074MB  5369MB  4295MB               bpool\n 3      5369MB  20.4GB  15.0GB               rpool\n"})}),"\n",(0,t.jsx)(n.h3,{id:"with-swap",children:"With swap"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"Number  Start   End     Size    File system  Name   Flags\n 5      1049kB  2097kB  1049kB  ext4         BIOS   bios_grub, legacy_boot\n 1      2097kB  1074MB  1072MB  fat32        EFI    boot, esp\n 2      1074MB  5369MB  4295MB               bpool\n 3      5369MB  18.3GB  12.9GB               rpool\n 4      18.3GB  20.4GB  2147MB               swap\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://chrisdown.name/2018/01/02/in-defence-of-swap.html",children:"In defense of swap"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://haydenjames.io/linux-performance-almost-always-add-swap-space/",children:"Linux Performance: Almost always add swap space"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"destroy-partitions",children:"Destroy partitions"}),"\n",(0,t.jsx)(n.p,{children:"In case you have a previous install with zfs labels, and IDs, is recomended to destroy everything or you will messages like that zfs is used on some machine IDs."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"wipefs -a /dev/disk/by-id/virtio-abcdef0123456789-part{1,2,3,4,5}\nwipefs -a /dev/disk/by-id/virtio-abcdef0123456789\nzpool labelclear -f /dev/disk/by-id/virtio-abcdef0123456789\nsgdisk --zap-all /dev/disk/by-id/virtio-abcdef0123456789\n"})}),"\n",(0,t.jsx)(n.h3,{id:"view-block-ids-for-zfs_members",children:"View block IDs for zfs_members"}),"\n",(0,t.jsxs)(n.p,{children:["Check no duplicated ",(0,t.jsx)(n.code,{children:"zfs_member"})," with same ",(0,t.jsx)(n.code,{children:"LABEL"})," or will have problems on boot with grub and zfs import."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"blkid -p /dev/vda{1,2,3,4,5} | grep --color zfs_member\n"})}),"\n",(0,t.jsx)(n.h3,{id:"wipe-script",children:"Wipe script"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:"title=docs/OS/GNU-Linux/NixOS/wipe.sh",children:"<<< docs/OS/GNU-Linux/NixOS/wipe.sh\n\n## Install\n\n### Install script collected from [NixOS Root on ZFS](https://openzfs.github.io/openzfs-docs/Getting%20Started/NixOS/Root%20on%20ZFS.html)\n\n```bash title=docs/OS/GNU-Linux/NixOS/install.sh\n<<< docs/OS/GNU-Linux/NixOS/install.sh\n\n### Check zpools\n\n```bash\n[root@nixos:~]# zfs get mounted,canmount,mountpoint rpool\nNAME   PROPERTY    VALUE       SOURCE\nrpool  mounted     no          -\nrpool  canmount    off         local\nrpool  mountpoint  /           local\n\n[root@nixos:~]# zfs get mounted,canmount,mountpoint bpool\nNAME   PROPERTY    VALUE       SOURCE\nbpool  mounted     no          -\nbpool  canmount    off         local\nbpool  mountpoint  /boot       local\n"})}),"\n",(0,t.jsx)(n.h3,{id:"console-and-locale-for-spanish",children:"Console and locale for Spanish"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-haskel",children:'  console = pkg.lib.mkforce {\n    keyMap = "es";\n    font = "Lat2-Terminus16";\n    useXkbConfig = true;\n  };\n\n  i18n.defaultLocale = "es_ES.UTF-8";\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["configs: ",(0,t.jsx)(n.a,{href:"https://github.com/mcdonc/p51-thinkpad-nixos/tree/zfsvid",children:"https://github.com/mcdonc/p51-thinkpad-nixos/tree/zfsvid"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Official ",(0,t.jsx)(n.a,{href:"https://openzfs.github.io/openzfs-docs/Getting%20Started/NixOS/Root%20on%20ZFS.html",children:"NixOS Root on ZFS"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Install videos","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["NixOS 1: ZFS Encrypted Root on Thinkpad P51","\n",(0,t.jsx)(t.Fragment,{children:(0,t.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/CboOUrkIZ2k?si=9lp1FIQHCWXQPDcv",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"default-configuration",children:"Default configuration"}),"\n",(0,t.jsx)(n.h3,{id:"configurationnix",children:"Configuration.nix"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'\n# Edit this configuration file to define what should be installed on\n# your system.  Help is available in the configuration.nix(5) man page\n# and in the NixOS manual (accessible by running `nixos-help`).\n\n{ config, pkgs, ... }:\n\n{\n  imports =\n    [ # Include the results of the hardware scan.\n      ./hardware-configuration.nix\n    ];\n\n  # Use the GRUB 2 boot loader.\n  boot.loader.grub.enable = true;\n  boot.kernelPackages = config.boot.zfs.package.latestCompatibleLinuxPackages;\n  boot.zfs.devNodes = "/dev/disk/by-partuuid";\n  boot.loader.grub.efiSupport = true;\n  boot.loader.grub.efiInstallAsRemovable = true;\n  boot.loader.efi.efiSysMountPoint = "/boot/efi";\n  # Define on which hard drive you want to install Grub.\n  # boot.loader.grub.device = "/dev/sda"; # or "nodev" for efi only\n  boot.loader.grub.device = "nodev"; # or "nodev" for efi only\n\n  boot.supportedFilesystems = [ "zfs" ];\n  boot.zfs.requestEncryptionCredentials = true;\n\n  network.hostId = "nixos-46f14301" # Define unique id, sample: head -c 8 /etc/machine-id\n  # Used to determine which machien last imported the zfs device\n\n  networking.hostName = "nixos"; # Define your hostname.\n  # Pick only one of the below networking options.\n  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.\n  networking.networkmanager.enable = true;  # Easiest to use and most distros use this by default.\n\n  # Set your time zone.\n  # time.timeZone = "Europe/Amsterdam";\n  time.timeZone = "Europe/Madrid";\n\n  # Configure network proxy if necessary\n  # networking.proxy.default = "http://user:password@proxy:port/";\n  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";\n\n  # Select internationalisation properties.\n  # i18n.defaultLocale = "en_US.UTF-8";\n  i18n.defaultLocale = "en_ES.UTF-8";\n  console = {\n    font = "Lat2-Terminus16";\n    keyMap = "es";\n    useXkbConfig = true; # use xkbOptions in tty.\n  };\n\n  # Enable the X11 windowing system.\n  services.xserver.enable = true;\n\n  services.zfs.autoScrub.enable = true;\n  services.zfs.trim.enable = false;\n  boot.kernelParams = [\n    "nohibernate"\n    "zfs.zfs_arc_max=12884901888"\n    "mitigations=off"\n  ];\n\n  # Enable the GNOME Desktop Environment.\n  services.xserver.displayManager.gdm.enable = true;\n  services.xserver.desktopManager.gnome.enable = true;\n  \n\n  # Configure keymap in X11\n  services.xserver.layout = "es";\n  # services.xserver.xkbOptions = "eurosign:e,caps:escape";\n\n  # Enable CUPS to print documents.\n  # services.printing.enable = true;\n\n  # Enable sound.\n  # sound.enable = true;\n  # hardware.pulseaudio.enable = true;\n\n  # Enable touchpad support (enabled default in most desktopManager).\n  # services.xserver.libinput.enable = true;\n\n  # Define a user account. Don\'t forget to set a password with \u2018passwd\u2019.\n  users.users.myuser = {\n    isNormalUser = true;\n    initialPassword= "myuser";\n    extraGroups = [ "wheel" ]; # Enable \u2018sudo\u2019 for the user.\n    packages = with pkgs; [\n  #    firefox\n      tree\n    ];\n  };\n\n  # List packages installed in system profile. To search, run:\n  # $ nix search wget\n  environment.systemPackages = with pkgs; [\n    vim # Do not forget to add an editor to edit configuration.nix! The Nano editor is also installed by default.\n    wget\n  ];\n\n  # Some programs need SUID wrappers, can be configured further or are\n  # started in user sessions.\n  # programs.mtr.enable = true;\n  # programs.gnupg.agent = {\n  #   enable = true;\n  #   enableSSHSupport = true;\n  # };\n\n  # List services that you want to enable:\n\n  # Enable the OpenSSH daemon.\n  # services.openssh.enable = true;\n\n  # Open ports in the firewall.\n  # networking.firewall.allowedTCPPorts = [ ... ];\n  # networking.firewall.allowedUDPPorts = [ ... ];\n  # Or disable the firewall altogether.\n  networking.firewall.enable = false;\n\n  # Copy the NixOS configuration file and link it from the resulting system\n  # (/run/current-system/configuration.nix). This is useful in case you\n  # accidentally delete configuration.nix.\n  # system.copySystemConfiguration = true;\n\n  # This value determines the NixOS release from which the default\n  # settings for stateful data, like file locations and database versions\n  # on your system were taken. It\'s perfectly fine and recommended to leave\n  # this value at the release version of the first install of this system.\n  # Before changing this value read the documentation for this option\n  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).\n  system.stateVersion = "23.05"; # Did you read the comment?\n\n}\n\n'})}),"\n",(0,t.jsx)(n.h3,{id:"hardware-generator",children:"Hardware generator"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'[root@nixos:/mnt/sergio/etc/nixos]# cat hardware-configuration.nix \n# Do not modify this file!  It was generated by \u2018nixos-generate-config\u2019\n# and may be overwritten by future invocations.  Please make changes\n# to /etc/nixos/configuration.nix instead.\n{ config, lib, pkgs, modulesPath, ... }:\n\n{\n  imports =\n    [ (modulesPath + "/profiles/qemu-guest.nix")\n    ];\n\n  boot.initrd.availableKernelModules = [ "ahci" "xhci_pci" "virtio_pci" "sr_mod" "virtio_blk" ];\n  boot.initrd.kernelModules = [ ];\n  boot.kernelModules = [ "kvm-amd" ];\n  boot.extraModulePackages = [ ];\n\n  swapDevices = [ ];\n\n  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking\n  # (the default) this is the recommended approach. When using systemd-networkd it\'s\n  # still possible to use this option, but it\'s recommended to use it in conjunction\n  # with explicit per-interface declarations with `networking.interfaces.[interface](interface).useDHCP`.\n  networking.useDHCP = lib.mkDefault true;\n  # networking.interfaces.enp1s0.useDHCP = lib.mkDefault true;\n\n  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";\n}\n'})})]})}function u(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},50065:function(e,n,i){i.d(n,{Z:function(){return a},a:function(){return r}});var s=i(67294);let t={},o=s.createContext(t);function r(e){let n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);