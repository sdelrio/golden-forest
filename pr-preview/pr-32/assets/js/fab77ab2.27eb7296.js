"use strict";(self.webpackChunkgolden_forest_website=self.webpackChunkgolden_forest_website||[]).push([[8253],{28453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>l});var s=r(96540);const n={},o=s.createContext(n);function a(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),s.createElement(o.Provider,{value:t},e.children)}},99532:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Cloud-Platform/Kubernetes/Concepts/HPA/hpa-autoscalers","title":"HPA autoscalers","description":"Autoscale using Prometheus","source":"@site/docs/Cloud-Platform/Kubernetes/Concepts/HPA/hpa-autoscalers.md","sourceDirName":"Cloud-Platform/Kubernetes/Concepts/HPA","slug":"/Cloud-Platform/Kubernetes/Concepts/HPA/hpa-autoscalers","permalink":"/golden-forest/pr-preview/pr-32/docs/Cloud-Platform/Kubernetes/Concepts/HPA/hpa-autoscalers","draft":false,"unlisted":false,"editUrl":"https://github.com/sdelrio/golden-forest/edit/master/docs/Cloud-Platform/Kubernetes/Concepts/HPA/hpa-autoscalers.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Horizontal Pod Autoscaler","permalink":"/golden-forest/pr-preview/pr-32/docs/Cloud-Platform/Kubernetes/Concepts/HPA/"},"next":{"title":"k8s Network Policies","permalink":"/golden-forest/pr-preview/pr-32/docs/Cloud-Platform/Kubernetes/Concepts/Networking/k8s-network-policies"}}');var n=r(74848),o=r(28453);const a={},l="HPA autoscalers",i={},c=[{value:"Autoscale using Prometheus",id:"autoscale-using-prometheus",level:2},{value:"Architecture Overview",id:"architecture-overview",level:3},{value:"Requirements",id:"requirements",level:3},{value:"Deployment",id:"deployment",level:4},{value:"Prometheus Adapter",id:"prometheus-adapter",level:4},{value:"References",id:"references",level:3}];function u(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"hpa-autoscalers",children:"HPA autoscalers"})}),"\n",(0,n.jsx)(t.h2,{id:"autoscale-using-prometheus",children:"Autoscale using Prometheus"}),"\n",(0,n.jsx)(t.h3,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,n.jsx)(t.mermaid,{value:"\n  flowchart TB;\n\n    HPA --custom/metrics.k8s.io/v1beta1--\x3e CMAPI[Custom Metrics API]\n    CMAPI --\x3e Prometheus\n    Prometheus --/metrics--\x3e Pods\n\n    classDef red fill:#eaa,stroke:#c00,stroke-width:2px\n    classDef green fill:#beb,stroke:#ada,stroke-width:2px\n    classDef blue fill:#bbe,stroke:#aad,stroke-width:2px\n\n\n    class HPA red\n    class CMAPI green\n    class Prometheus green\n    class Pods blue\n"}),"\n",(0,n.jsx)(t.h3,{id:"requirements",children:"Requirements"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"External metrics provider (k8s 1.10+)"}),"\n",(0,n.jsx)(t.li,{children:"Prometheus"}),"\n",(0,n.jsx)(t.li,{children:"Prometheus adapter"}),"\n"]}),"\n",(0,n.jsx)(t.h4,{id:"deployment",children:"Deployment"}),"\n",(0,n.jsx)(t.p,{children:"Make sure Deployment gathers prometheus metrics:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'  template:\n    metadata:\n      annotations:\n        prometheus.io/path: "/metrics"\n        prometheus.io/scrape: "true"\n        prometheus.io/port: "8000"\n'})}),"\n",(0,n.jsx)(t.h4,{id:"prometheus-adapter",children:"Prometheus Adapter"}),"\n",(0,n.jsxs)(t.p,{children:["Add a ",(0,n.jsx)(t.a,{href:"https://github.com/prometheus-community/helm-charts/blob/cd5c69a2ef0a3d5f3478374ba495d27a57b444d4/charts/prometheus-adapter/values.yaml#L85-L87",children:"custom rule"})," on prometheus or a Configmap for the adapter config and mount it as volume on the prometheus adapter deployment:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"configmap"}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: adapter-config\n  namespace: monitoring\ndata:\n  config.yaml: |\n    rules:\n    - seriesQuery: \'nginx_vts_server_requests_total\'\n      resources:\n        overrides:\n          kubernetes_namespace:\n            resource: namespace\n          kubernetes_pod_name:\n            resource: pod\n      name:\n        matches: "^(.*)_total"\n        as: "${1}_per_second"\n      metricsQuery: (sum(rate([<.Series>>{<<.LabelMatchers>>}[1m])) by (<<.GroupBy>](<.Series>>{<<.LabelMatchers>>}[1m])) by (<<.GroupBy>)))\n'})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"prometheus adapter deployment"}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"        volumeMounts:\n        - mountPath: /etc/adapter/\n          name: config\n          readOnly: true\n      volumes:\n      - name: config\n        configMap:\n          name: adapter-config\n"})}),"\n",(0,n.jsx)(t.h3,{id:"references",children:"References"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://pet2cattle.com/2022/04/prometheus-hpa-external-metrics",children:"https://pet2cattle.com/2022/04/prometheus-hpa-external-metrics"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://medium.com/the-metricfire-blog/prometheus-metrics-based-autoscaling-in-kubernetes-3f4388501c8e",children:"https://medium.com/the-metricfire-blog/prometheus-metrics-based-autoscaling-in-kubernetes-3f4388501c8e"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://www.metricfire.com/blog/prometheus-metrics-based-autoscaling-in-kubernetes/",children:"https://www.metricfire.com/blog/prometheus-metrics-based-autoscaling-in-kubernetes/"})}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}}}]);