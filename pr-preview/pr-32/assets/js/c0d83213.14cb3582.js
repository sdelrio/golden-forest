"use strict";(self.webpackChunkgolden_forest_website=self.webpackChunkgolden_forest_website||[]).push([[9685],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(96540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}},99909:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"Containers/Docker/docker-tag","title":"Docker tag","description":"Based on git commit","source":"@site/docs/Containers/Docker/docker-tag.md","sourceDirName":"Containers/Docker","slug":"/Containers/Docker/docker-tag","permalink":"/golden-forest/pr-preview/pr-32/docs/Containers/Docker/docker-tag","draft":false,"unlisted":false,"editUrl":"https://github.com/sdelrio/golden-forest/edit/master/docs/Containers/Docker/docker-tag.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Docker registry","permalink":"/golden-forest/pr-preview/pr-32/docs/Containers/Docker/docker-registry"},"next":{"title":"Docker for windows","permalink":"/golden-forest/pr-preview/pr-32/docs/Containers/Docker/docker-windows"}}');var r=t(74848),o=t(28453);const s={},a="Docker tag",c={},l=[{value:"Based on git commit",id:"based-on-git-commit",level:2},{value:"Makefile",id:"makefile",level:3},{value:"Version + commit + date",id:"version--commit--date",level:2},{value:"Version based on a file content diff",id:"version-based-on-a-file-content-diff",level:2},{value:"ci-version",id:"ci-version",level:2},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"docker-tag",children:"Docker tag"})}),"\n",(0,r.jsx)(n.h2,{id:"based-on-git-commit",children:"Based on git commit"}),"\n",(0,r.jsx)(n.p,{children:"Very useful for integration/staging environments or any automated release."}),"\n",(0,r.jsx)(n.p,{children:"Get the latest commit of your repo and use as the tag"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Long version"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ git log -1 --pretty=%H\na4b31e3966d51716e0a5794daed664208194c65e\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Short version"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ git log -1 --pretty=%h\na4b31e3\n"})}),"\n",(0,r.jsx)(n.h3,{id:"makefile",children:"Makefile"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"NAME   := your_org/your_app\nTAG    := $$(git log -1 --pretty=%!H)\nIMG    := ${NAME}:${TAG}\nLATEST := ${NAME}:latest\n\nbuild:\n  @docker build -t ${IMG} .\n  @docker tag ${IMG} ${LATEST}\n\npush:\n  @docker push ${NAME}\n\nlogin:\n  @docker log -u ${DOCKER_USER} -p ${DOCKER_PASS}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"version--commit--date",children:"Version + commit + date"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# version based on git tag\nTAG_COMMIT := $(shell git rev-list --abbrev-commit --tags --max-count=1)\n# `2>/dev/null` suppress errors and `|| true` suppress the error codes.\nTAG := $(shell git describe --abbrev=0 --tags ${TAG_COMMIT} 2>/dev/null || true)\n# get the latest commit hash in the short form\nCOMMIT := $(shell git rev-parse --short HEAD)\n# get the latest commit date in the form of YYYYmmdd\nDATE := $(shell git log -1 --format=%cd --date=format:"%Y%m%d")\n# strip version prefix "v"\nVERSION := $(TAG:v%=%)\n# Deal with nightly builds that appeared after a particular\nversion\nifneq ($(COMMIT), $(TAG_COMMIT))\n  VERSION := $(VERSION)-next-$(COMMIT)-$(DATE)\nendif\n# Check if the version string is empty\nifeq $(VERSION,)\n  VERSION := $(COMMIT)-$(DATA)\nendif\n# git status --porcelain outputs a machine-readable text and the output is empty\n# if the working tree is clean\nifneq ($(shell git status --porcelain),)\n  VERSION := $(VERSION)-dirty\nendif\n'})}),"\n",(0,r.jsx)(n.h2,{id:"version-based-on-a-file-content-diff",children:"Version based on a file content diff"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"check_version_changes(){\n    git diff  $(git describe --tags --abbrev=0 HEAD)..HEAD -- mymodule/__init__.py | grep --quiet +__version__;\n};\n\n\nif ! check_version_changes; then\n    echo \"Version not changed\"\n    exit 0\nfi\n\nVERSION=$(python -c 'import forwarder; print(mymodule.__version__)')\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/pando85/alertmanager-telegram-forwarder/blob/master/.ci/tag_version.sh",children:"https://github.com/pando85/alertmanager-telegram-forwarder/blob/master/.ci/tag_version.sh"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/pando85/aiofunctools/blob/master/.ci/tag_version.sh",children:"https://github.com/pando85/aiofunctools/blob/master/.ci/tag_version.sh"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"ci-version",children:"ci-version"}),"\n",(0,r.jsx)(n.p,{children:"With Docker:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker run --rm -v /path/to/my/repository:/repo:ro softonic/ci-version\n#> 1.2.0\ndocker run --rm -v /path/to/my/repository:/repo:ro softonic/ci-version --compatible-with package.json\n#> 1.2.0\ndocker run --rm -v /path/to/my/repository:/repo:ro softonic/ci-version --compatible-with composer.json\n#> 1.2.0\n"})}),"\n",(0,r.jsx)(n.p,{children:"CLI program to determine new versions in CI projects"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/softonic/ci-version",children:"https://github.com/softonic/ci-version"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://blog.container-solutions.com/tagging-docker-images-the-right-way",children:"Tagging docker images the right way"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://blog.scottlowe.org/2017/11/08/how-tag-docker-images-git-commit-information/",children:"How to Tag Docker Images with Git Commit Information"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://dev.to/eugenebabichenko/generating-pretty-version-strings-including-nightly-with-git-and-makefiles-48p3",children:"Generating pretty version strings (including nightly) with Git and Makefiles"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://eugene-babichenko.github.io/blog/2019/09/28/nightly-versions-makefiles/",children:"Generating pretty version strings (including nightly) with Git and Makefiles"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);