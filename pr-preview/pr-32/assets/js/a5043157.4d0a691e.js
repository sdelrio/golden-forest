"use strict";(self.webpackChunkgolden_forest_website=self.webpackChunkgolden_forest_website||[]).push([[5185],{6942:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"Coding/Go/go","title":"Go","description":"Go), also known as Golang, is an open-source programming language developed by Google in 2009. It is designed for simplicity, efficiency, and strong concurrency support, making it well-suited for building scalable and high-performance applications. Go combines the ease of use of dynamically typed languages with the performance and safety of statically typed languages. It features a clean syntax, garbage collection, and built-in support for concurrent programming through goroutines. Go is widely used in cloud services, distributed systems, and other performance-critical application","source":"@site/docs/Coding/Go/go.md","sourceDirName":"Coding/Go","slug":"/Coding/Go/","permalink":"/pr-preview/pr-32/docs/Coding/Go/","draft":false,"unlisted":false,"editUrl":"https://github.com/sdelrio/golden-forest/edit/master/docs/Coding/Go/go.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Localizer","permalink":"/pr-preview/pr-32/docs/Coding/Debug/k8s-localizer"},"next":{"title":"Javascript Frameworks","permalink":"/pr-preview/pr-32/docs/Coding/Javascript/js-frameworks"}}');var r=i(74848),s=i(28453);const a={},t="Go",l={},d=[{value:"History",id:"history",level:2},{value:"Usefull links",id:"usefull-links",level:2}];function c(e){const n={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"go",children:"Go"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Go_(programming_language)",children:"Go"}),", also known as Golang, is an open-source programming language developed by Google in 2009. It is designed for simplicity, efficiency, and strong concurrency support, making it well-suited for building scalable and high-performance applications. Go combines the ease of use of dynamically typed languages with the performance and safety of statically typed languages. It features a clean syntax, garbage collection, and built-in support for concurrent programming through goroutines. Go is widely used in cloud services, distributed systems, and other performance-critical application"]}),"\n",(0,r.jsx)(n.h2,{id:"history",children:"History"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"2007-2009: Early Development"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"2007: The Go language was conceived by Robert Griesemer, Rob Pike, and Ken Thompson at Google. The aim was to create a language that combined the performance of C with the ease of use of modern languages."}),"\n",(0,r.jsx)(n.li,{children:"2009: Go was officially announced to the public as an open-source project on November 10, 2009. The initial version (Go 1.0) included key features like goroutines, channels, and garbage collection."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"2012: Go 1.0 Release"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"2012: Go 1.0 was released in March 2012. It was the first stable release, establishing Go\u2019s core features and compatibility guidelines. This version provided a stable base for developers, with a focus on backward compatibility in future updates."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"2013-2014: Early Adoption and Growth"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"2013-2014: Go gained popularity, particularly in the cloud infrastructure and DevOps communities. During this period, various improvements were made in libraries, tools, and performance, but the language itself remained stable to maintain backward compatibility."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"2015-2016: Go 1.5 and Go 1.6"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"2015: Go 1.5 was released, marking a significant milestone as it was the first version to be self-hosted (written in Go itself, rather than C). This release included improvements to the garbage collector and the introduction of the vendoring feature for dependency management."}),"\n",(0,r.jsx)(n.li,{children:"2016: Go 1.6 focused on further performance improvements and introduced HTTP/2 support in the net/http package, enhancing the language\u2019s capability for web services."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"2017-2018: Go 1.8 to Go 1.10"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"2017-2018: These years saw incremental updates (Go 1.8 to Go 1.10) that focused on performance optimizations, tooling enhancements (like go vet improvements), and better support for various platforms. Go 1.9 introduced type aliases, while Go 1.10 improved build caching for faster compile times."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"2019: Go 1.12 and the Go Modules System"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"2019: Go 1.12 was released with improved support for modules, a new dependency management system that became the default in Go 1.13. The introduction of modules marked a significant change in how dependencies were managed, moving away from GOPATH."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"2020: Go 1.14 and Beyond"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"2020: Go 1.14 introduced goroutine preemption, improving the language\u2019s concurrency model. The releases continued to enhance performance and developer experience, with refinements to the runtime and standard library."}),"\n",(0,r.jsxs)(n.li,{children:["2021: Go 1.16 brought native support for file embedding and the //go",":embed"," directive, as well as better module support. Go 1.17 introduced a new way of calling functions (register ABI) for performance gains."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"2022-2023: Go 1.18 and Generics"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"2022: Go 1.18 was a landmark release with the introduction of generics, a long-awaited feature that allows developers to write more flexible and reusable code."}),"\n",(0,r.jsx)(n.li,{children:"2023: Subsequent versions continued to refine generics and improve overall language performance and stability, making Go even more powerful and efficient for modern software development."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"usefull-links",children:"Usefull links"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://roadmap.sh/golang",children:"Go Developer"}),". Step by step guide to become a Go developer in 2024."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://roadmap.sh/golang",children:"Common Go Mistakes"}),". 100 Go mistakes and how to avoid them."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>t});var o=i(96540);const r={},s=o.createContext(r);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);