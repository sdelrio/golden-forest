"use strict";(self.webpackChunkgolden_forest_website=self.webpackChunkgolden_forest_website||[]).push([[7389],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return p}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=u(n),p=a,f=m["".concat(s,".").concat(p)]||m[p]||d[p]||i;return n?r.createElement(f,l(l({ref:t},c),{},{components:n})):r.createElement(f,l({ref:t},c))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},58215:function(e,t,n){var r=n(67294);t.Z=function(e){var t=e.children,n=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},9877:function(e,t,n){n.d(t,{Z:function(){return c}});var r=n(83117),a=n(67294),i=n(72389),l=n(24726),o=n(86010),s="tabItem_LplD";function u(e){var t,n,i,u=e.lazy,c=e.block,d=e.defaultValue,m=e.values,p=e.groupId,f=e.className,g=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=m?m:g.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),v=(0,l.lx)(h,(function(e,t){return e.value===t.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===d?d:null!=(t=null!=d?d:null==(n=g.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(i=g[0])?void 0:i.props.value;if(null!==k&&!h.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=(0,l.UB)(),y=b.tabGroupChoices,w=b.setTabGroupChoices,N=(0,a.useState)(k),C=N[0],E=N[1],T=[],x=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=p){var O=y[p];null!=O&&O!==C&&h.some((function(e){return e.value===O}))&&E(O)}var A=function(e){var t=e.currentTarget,n=T.indexOf(t),r=h[n].value;r!==C&&(x(t),E(r),null!=p&&w(p,r))},D=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r=T.indexOf(e.currentTarget)+1;n=T[r]||T[0];break;case"ArrowLeft":var a=T.indexOf(e.currentTarget)-1;n=T[a]||T[T.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":c},f)},h.map((function(e){var t=e.value,n=e.label,i=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:function(e){return T.push(e)},onKeyDown:D,onFocus:A,onClick:A},i,{className:(0,o.Z)("tabs__item",s,null==i?void 0:i.className,{"tabs__item--active":C===t})}),null!=n?n:t)}))),u?(0,a.cloneElement)(g.filter((function(e){return e.props.value===C}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},g.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==C})}))))}function c(e){var t=(0,i.Z)();return a.createElement(u,(0,r.Z)({key:String(t)},e))}},52156:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return m},default:function(){return f}});var r=n(83117),a=n(80102),i=(n(67294),n(3905)),l=n(9877),o=n(58215),s=["components"],u={},c="GIT",d={unversionedId:"Coding/CVS/git",id:"Coding/CVS/git",title:"GIT",description:"GIT is software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows (thousands of parallel branches running on different systems).",source:"@site/docs/Coding/CVS/git.md",sourceDirName:"Coding/CVS",slug:"/Coding/CVS/git",permalink:"/docs/Coding/CVS/git",editUrl:"https://github.com/sdelrio/golden-forest/edit/master/docs/Coding/CVS/git.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Gerrit",permalink:"/docs/Coding/CVS/gerrit"},next:{title:"Gitea",permalink:"/docs/Coding/CVS/gitea"}},m=[{value:"Monorepo",id:"monorepo",children:[],level:2},{value:"Delete remote tag",id:"delete-remote-tag",children:[],level:2},{value:"Git Large File Storage",id:"git-large-file-storage",children:[{value:"Setup",id:"setup",children:[],level:3},{value:"Add large file sample",id:"add-large-file-sample",children:[],level:3}],level:2},{value:"Git terminal colors",id:"git-terminal-colors",children:[],level:2},{value:"Alias",id:"alias",children:[],level:2},{value:"Remove directory from cache",id:"remove-directory-from-cache",children:[],level:2},{value:"Commitizen",id:"commitizen",children:[{value:"Install",id:"install",children:[],level:3},{value:"Usage",id:"usage",children:[],level:3},{value:"References",id:"references",children:[],level:3}],level:2},{value:"pre-commit",id:"pre-commit",children:[{value:"Install",id:"install-1",children:[],level:3},{value:"Configuration",id:"configuration",children:[],level:3},{value:"References",id:"references-1",children:[],level:3}],level:2}],p={toc:m};function f(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"git"},"GIT"),(0,i.kt)("p",null,"GIT is software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows (thousands of parallel branches running on different systems)."),(0,i.kt)("p",null,"Git was created by Linus Torvalds in 2005 for development of the Linux kernel, with other kernel developers contributing to its initial development. Since 2005, Junio Hamano has been the core maintainer. As with most other distributed version control systems, and unlike most client\u2013server systems, every Git directory on every computer is a full-fledged repository with complet history and full version-tracking abilities, independent of network access or a central server. Git is free and open-source software distributed under the GPL-2.0-only license."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://git-scm.com/"},"Homepage")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Git"},"Wikipedia")," ")),(0,i.kt)("h2",{id:"monorepo"},"Monorepo"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://dropbox.tech/application/speeding-up-a-git-monorepo-at-dropbox-with--200-lines-of-code"},"Speeding up a Git monorepo at Dropbox with"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://dropbox.tech/infrastructure/continuous-integration-and-deployment-with-bazel"},"Beziel")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://dropbox.tech/infrastructure/athena-our-automated-build-health-management-system"},"Athena: Our automated build health management system"))))),(0,i.kt)("h2",{id:"delete-remote-tag"},"Delete remote tag"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"git push --delete origin tagName\ngit tag -d tagName\n")),(0,i.kt)("h2",{id:"git-large-file-storage"},"Git Large File Storage"),(0,i.kt)("p",null,"Git Large File Storage (LFS) replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://git-lfs.github.com/"},"An open source it extension for versioning large files"))),(0,i.kt)("h3",{id:"setup"},"Setup"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'git lfs install\ngit lfs track "*.psd"\ngit add .gitattributes\n')),(0,i.kt)("h3",{id:"add-large-file-sample"},"Add large file sample"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'git add file.psd\ngit commit -m "Add design file"\ngit push origin main\n')),(0,i.kt)("h2",{id:"git-terminal-colors"},"Git terminal colors"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"~/.gitconfig"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ini"},'[color]\n    diff = always\n    ui = always\n    status = auto\n    branch = auto\n    interactive = auto\n    pager = true\n[color "status"]\n  added = green\n  changed = red bold\n  untracked = magenta bold\n\n[color "branch"]\n  remote = yellow\n')),(0,i.kt)("h2",{id:"alias"},"Alias"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"~/.gitconfig"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ini"},'[alias]\n    review = "!f() { git push -u ${1:-origin} HEAD:`git config branch.$(git name-rev --name-only HEAD).merge | sed -e \'s@refs/heads/@refs/for/@\'`; }; f"\n    unstage = reset --soft HEAD^\n    ls = log --pretty=format:"%C(yellow)%h%Cred%d\\\\ %Creset%s%Cblue\\\\ [%cn]" --decorate\n    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\\\ %Creset%s%Cblue\\\\ [%cn]" --decorate --numstat\n    st = status -s\n    gl = clone\n    ci = commit\n    co = checkout\n    br = branch\n    dif = diff --word-diff\n    diff1 = diff HEAD^\n    diff2 = diff HEAD^^\n    dc = diff --cached\n    r = reset\n    r1 = reset HEAD^\n    r2 = reset HEAD^^\n    rh = reset --hard\n    rh1 = reset HEAD^ --hard\n    rh2 = reset HEAD^^ --hard\n')),(0,i.kt)("h2",{id:"remove-directory-from-cache"},"Remove directory from cache"),(0,i.kt)("p",null,"Remove directory from remote repository after adding them to ",(0,i.kt)("inlineCode",{parentName:"p"},".gitignore")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"git rm -r --cached node_modules\ngit commit -m 'Remove the now ignored directory node_modules'\ngit push origin master\n")),(0,i.kt)("h2",{id:"commitizen"},"Commitizen"),(0,i.kt)("p",null,"Simple commit conventions for internet citizens."),(0,i.kt)("p",null,"When you commit with Commitizen, you'll be prompted to fill out any required commit fields at commit time. No more waiting until later for a git commit hook to run and reject your commit. No more digging through CONTRIBUTING.md to find what the preferred format is. Get instant feedback on your commit message formatting and be prompted for required fields."),(0,i.kt)("h3",{id:"install"},"Install"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -g commitizen\n")),(0,i.kt)("h3",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ git add .\n$ git cz\n\nAll commit message lines will be cropped at 100 characters.\n? Select the type of change that you're commiting: (Use arrow keys)\n> feat:     A new feature\n  fix:      A bug fix\n  docs:     Documentaiton only changes\n  style:    Changes that do not aaffect the meaning of the code\n  refactor: A code change that neither fixes a bug or adds a feature\n  perf:     A code change that improves performance\n  test:     Adding missing tests\n  chore:    Changes to the build process or auxiliary tools and\n            libraires such as documetation generation\n")),(0,i.kt)("h3",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/commitizen/cz-cli"},"Commitizen GitHub")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://commitizen.github.io/cz-cli/"},"Commitizen doc"))),(0,i.kt)("h2",{id:"pre-commit"},"pre-commit"),(0,i.kt)("p",null,"A framework for managing and maitining multi-language pre-commit hooks"),(0,i.kt)("h3",{id:"install-1"},"Install"),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"pip",label:"pip",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pip install pre-commit\necho 'pre-commmit > requirements-dev.txt'\n"))),(0,i.kt)(o.Z,{value:"brew",label:"brew",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"brew install pre-commit\n")))),(0,i.kt)("h3",{id:"configuration"},"Configuration"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create file ",(0,i.kt)("inlineCode",{parentName:"li"},".pre-commit-config.yaml"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v2.3.0\n    hooks:\n    -   id: check-yaml\n    -   id: end-of-file-fixer\n    -   id: trailing-whitespace\n-   repo: https://github.com/psf/black\n    rev: 21.12b0\n    hooks:\n    -   id: black\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Install the git hoook")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ pre-commit install\n")),(0,i.kt)("h3",{id:"references-1"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://pre-commit.com/"},"pre-commit homepage"))))}f.isMDXComponent=!0}}]);