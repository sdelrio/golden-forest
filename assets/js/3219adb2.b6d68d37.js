"use strict";(self.webpackChunkgolden_forest_website=self.webpackChunkgolden_forest_website||[]).push([[706],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=l(t),f=o,m=d["".concat(p,".").concat(f)]||d[f]||u[f]||i;return t?r.createElement(m,s(s({ref:n},c),{},{components:t})):r.createElement(m,s({ref:n},c))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,s=new Array(i);s[0]=d;var a={};for(var p in n)hasOwnProperty.call(n,p)&&(a[p]=n[p]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var l=2;l<i;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},19241:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var r=t(83117),o=(t(67294),t(3905));const i={},s="Jenkinsfile node app",a={unversionedId:"DevOps/CI/Platforms/Jenkins/Jenkinsfile-node",id:"DevOps/CI/Platforms/Jenkins/Jenkinsfile-node",title:"Jenkinsfile node app",description:"* Set up Jenkins CI in Docker Container & Run Your Tests Inside Their Own Container A How-To Guide",source:"@site/docs/DevOps/CI/Platforms/Jenkins/Jenkinsfile-node.md",sourceDirName:"DevOps/CI/Platforms/Jenkins",slug:"/DevOps/CI/Platforms/Jenkins/Jenkinsfile-node",permalink:"/docs/DevOps/CI/Platforms/Jenkins/Jenkinsfile-node",draft:!1,editUrl:"https://github.com/sdelrio/golden-forest/edit/master/docs/DevOps/CI/Platforms/Jenkins/Jenkinsfile-node.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Groovy scripts",permalink:"/docs/DevOps/CI/Platforms/Jenkins/Groovy-start-scripts"},next:{title:"Jenkinsfile React app",permalink:"/docs/DevOps/CI/Platforms/Jenkins/Jenkinsfile-react"}},p={},l=[],c={toc:l};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"jenkinsfile-node-app"},"Jenkinsfile node app"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://hackernoon.com/set-up-jenkins-ci-in-docker-container-and-run-your-tests-inside-their-own-container-a-how-to-guide-7h8u32yi"},"Set up Jenkins CI in Docker Container & Run Your Tests Inside Their Own Container A How-To Guide"))),(0,o.kt)("h1",{id:"jenkinsfile"},"Jenkinsfile"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-groovy"},'pipeline {\n    environment {\n        // This registry is important for removing the image after the tests \n        registry = "yourname/nodeapp"\n    }\n    agent any\n    stages {\n        stage("Test") {\n            steps {\n                script { // Building the Docker image \n                dockerImage = docker.build registry + ":$BUILD_NUMBER" \n                try {\n                    dockerImage.inside() {\n                        // Extracting the PROJECTDIR environment variable from inside the container \n                        def PROJECTDIR = sh(script: \'echo \\$PROJECTDIR\', returnStdout: true).trim()\n                        // Copying the project into our workspace\n                        sh "cp -r \'$PROJECTDIR\' \'$WORKSPACE\'"\n                        // Running the tests inside the new directory \n                        dir("$WORKSPACE$PROJECTDIR") { sh "npm test" }\n                    }\n                } finally {\n                    // Removing the docker image \n                    sh "docker rmi $registry:$BUILD_NUMBER"\n                }\n            }\n        }\n    }\n}\n\n')),(0,o.kt)("h1",{id:"dockerfile"},"Dockerfile"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dockerfile"},'FROM node:latest\n\nENV PROJECTDIR /nodeApp\n\nWORKDIR $PROJECTDIR\n\nCOPY package*.json ./\n\nRUN npm install\n\nCOPY . .\n\nEXPOSE 3000\n\nCMD ["npm", "start"]\n')),(0,o.kt)("h1",{id:"appjs"},"app.js"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const express = require("express");\nconst app = express();\nconst port =  process.env.PORT || 3000;\n\napp.get(\'/\', (req, res) => {\n    res.status(200);\n    res.send("Cool beans");\n});\n\napp.listen(port, () => {\n    console.log(`App is up and listening on port ${port}`);\n});\n\nmodule.exports = app;\n')))}u.isMDXComponent=!0}}]);