"use strict";(self.webpackChunkgolden_forest_website=self.webpackChunkgolden_forest_website||[]).push([[325],{3905:(e,n,i)=>{i.d(n,{Zo:()=>m,kt:()=>p});var s=i(67294);function t(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function o(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,s)}return i}function r(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?o(Object(i),!0).forEach((function(n){t(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function a(e,n){if(null==e)return{};var i,s,t=function(e,n){if(null==e)return{};var i,s,t={},o=Object.keys(e);for(s=0;s<o.length;s++)i=o[s],n.indexOf(i)>=0||(t[i]=e[i]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)i=o[s],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(t[i]=e[i])}return t}var l=s.createContext({}),d=function(e){var n=s.useContext(l),i=n;return e&&(i="function"==typeof e?e(n):r(r({},n),e)),i},m=function(e){var n=d(e.components);return s.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},c=s.forwardRef((function(e,n){var i=e.components,t=e.mdxType,o=e.originalType,l=e.parentName,m=a(e,["components","mdxType","originalType","parentName"]),c=d(i),p=t,f=c["".concat(l,".").concat(p)]||c[p]||u[p]||o;return i?s.createElement(f,r(r({ref:n},m),{},{components:i})):s.createElement(f,r({ref:n},m))}));function p(e,n){var i=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=i.length,r=new Array(o);r[0]=c;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:t,r[1]=a;for(var d=2;d<o;d++)r[d]=i[d];return s.createElement.apply(null,r)}return s.createElement.apply(null,i)}c.displayName="MDXCreateElement"},6175:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var s=i(83117),t=(i(67294),i(3905));const o={},r="Groovy scripts",a={unversionedId:"DevOps/CI/Platforms/Jenkins/Groovy-start-scripts",id:"DevOps/CI/Platforms/Jenkins/Groovy-start-scripts",title:"Groovy scripts",description:"Jenkins server configuration",source:"@site/docs/DevOps/CI/Platforms/Jenkins/Groovy-start-scripts.md",sourceDirName:"DevOps/CI/Platforms/Jenkins",slug:"/DevOps/CI/Platforms/Jenkins/Groovy-start-scripts",permalink:"/docs/DevOps/CI/Platforms/Jenkins/Groovy-start-scripts",draft:!1,editUrl:"https://github.com/sdelrio/golden-forest/edit/master/docs/DevOps/CI/Platforms/Jenkins/Groovy-start-scripts.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Jenkins",permalink:"/docs/DevOps/CI/Platforms/Jenkins/"},next:{title:"Jenkinsfile node app",permalink:"/docs/DevOps/CI/Platforms/Jenkins/Jenkinsfile-node"}},l={},d=[{value:"Jenkins server configuration",id:"jenkins-server-configuration",level:2},{value:"Activate user roles",id:"activate-user-roles",level:2},{value:"LDAP groups roles",id:"ldap-groups-roles",level:2},{value:"Load an extra Jenkinsfile",id:"load-an-extra-jenkinsfile",level:2},{value:"Groovy file check",id:"groovy-file-check",level:2},{value:"Groovy environment vars",id:"groovy-environment-vars",level:2},{value:"General enviornment vars",id:"general-enviornment-vars",level:3},{value:"Build environment vars",id:"build-environment-vars",level:2},{value:"Jenkins OK/Cancel button",id:"jenkins-okcancel-button",level:2}],m={toc:d};function u(e){let{components:n,...i}=e;return(0,t.kt)("wrapper",(0,s.Z)({},m,i,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"groovy-scripts"},"Groovy scripts"),(0,t.kt)("h2",{id:"jenkins-server-configuration"},"Jenkins server configuration"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("a",{parentName:"p",href:"https://github.com/hayderimran7/useful-jenkins-groovy-init-scripts/blob/master/init.groovy"},"Usefull jenkins groovy init scripts"),": A script that setups and configure Jenkins with a script, non-interactive mode.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("a",{parentName:"p",href:"https://github.com/samrocketman/jenkins-bootstrap-jervis"},"Automated Jenkins CI env which provisions agent infra on the fly per build"),": Bootstrap Jenkins using Jervis (Jenkins as a Service)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("a",{parentName:"p",href:"https://github.com/mvanholsteijn/docker-makefile/blob/master/Makefile"},"mvanholsteijn/docker-makefile"),": Makefile for building docker repository releases"))),(0,t.kt)("h2",{id:"activate-user-roles"},(0,t.kt)("a",{parentName:"h2",href:"https://gist.github.com/mllrjb/ccfd3315b7546ae8e8382ff693b34d7f"},"Activate user roles")),(0,t.kt)("p",null,"Set a system environment variable AUTHZ_JSON_URL that points to a JSON file with the following structure:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "admins": [\n    "groupA", \n    "userA"\n  ],\n  "builders": [\n    "groupB",\n    "userB"\n  ],\n  "readers": ["anonymous"]\n}\n')),(0,t.kt)("p",null,"If you don't specify a URL, it will just grant admin access to anonymous."),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"role-authz.groovy"))),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'import hudson.*\nimport hudson.security.*\nimport jenkins.model.*\nimport java.util.*\nimport com.michelin.cio.hudson.plugins.rolestrategy.*\nimport com.synopsys.arc.jenkins.plugins.rolestrategy.*\nimport java.lang.reflect.*\nimport java.util.logging.*\nimport groovy.json.*\n\ndef env = System.getenv()\n\n/**\n * ===================================\n *         \n *                Roles\n *\n * ===================================\n */\ndef globalRoleRead = "read"\ndef globalBuildRole = "build"\ndef globalRoleAdmin = "admin"\n\n/**\n * ===================================\n *         \n *           Users and Groups\n *\n * ===================================\n */\ndef access = [\n  admins: ["anonymous"],\n  builders: [],\n  readers: []\n]\n\nif (env.AUTHZ_JSON_FILE)  {\n  println "Get role authorizations from file ${env.AUTHZ_JSON_FILE}"\n  File f = new File(env.AUTHZ_JSON_FILE)\n  def jsonSlurper = new JsonSlurper()\n  def jsonText = f.getText()\n  access = jsonSlurper.parseText( jsonText )\n}\nelse if (env.AUTH_JSON_URL) {\n  println "Get role authorizations from URL ${env.AUTHZ_JSON_URL}"\n  URL jsonUrl = new URL(env.AUTHZ_JSON_URL);\n  access = new JsonSlurper().parse(jsonUrl);\n}\nelse {\n  println "Warning! Neither env.AUTHZ_JSON_FILE nor env.AUTHZ_JSON_URL specified!"\n  println "Granting anonymous admin access"\n} \n\n/**\n * ===================================\n *         \n *           Permissions\n *\n * ===================================\n */\n\n// drive these from a config file\ndef adminPermissions = [\n"hudson.model.Hudson.Administer",\n"hudson.model.Hudson.Read"\n]\n\ndef readPermissions = [\n"hudson.model.Hudson.Read",\n"hudson.model.Item.Discover",\n"hudson.model.Item.Read"\n]\n\ndef buildPermissions = [\n"hudson.model.Hudson.Read",\n"hudson.model.Item.Build",\n"hudson.model.Item.Cancel",\n"hudson.model.Item.Read",\n"hudson.model.Run.Replay"\n]\n\ndef roleBasedAuthenticationStrategy = new RoleBasedAuthorizationStrategy()\nJenkins.instance.setAuthorizationStrategy(roleBasedAuthenticationStrategy)\n\n\n/**\n * ===================================\n *         \n *               HACK\n * Inspired by https://issues.jenkins-ci.org/browse/JENKINS-23709\n * Deprecated by on https://github.com/jenkinsci/role-strategy-plugin/pull/12\n *\n * ===================================\n */\n\nConstructor[] constrs = Role.class.getConstructors();\nfor (Constructor<?> c : constrs) {\n  c.setAccessible(true);\n}\n\n// Make the method assignRole accessible\nMethod assignRoleMethod = RoleBasedAuthorizationStrategy.class.getDeclaredMethod("assignRole", RoleType.class, Role.class, String.class);\nassignRoleMethod.setAccessible(true);\nprintln("HACK! changing visibility of RoleBasedAuthorizationStrategy.assignRole")\n\n/**\n * ===================================\n *         \n *           Permissions\n *\n * ===================================\n */\n\nSet<Permission> adminPermissionSet = new HashSet<Permission>();\nadminPermissions.each { p ->\n  def permission = Permission.fromId(p);\n  if (permission != null) {\n    adminPermissionSet.add(permission);\n  } else {\n    println("${p} is not a valid permission ID (ignoring)")\n  }\n}\n\nSet<Permission> buildPermissionSet = new HashSet<Permission>();\nbuildPermissions.each { p ->\n  def permission = Permission.fromId(p);\n  if (permission != null) {\n    buildPermissionSet.add(permission);\n  } else {\n    println("${p} is not a valid permission ID (ignoring)")\n  }\n}\n\nSet<Permission> readPermissionSet = new HashSet<Permission>();\nreadPermissions.each { p ->\n  def permission = Permission.fromId(p);\n  if (permission != null) {\n    readPermissionSet.add(permission);\n  } else {\n    println("${p} is not a valid permission ID (ignoring)")\n  }\n}\n\n/**\n * ===================================\n *         \n *      Permissions -> Roles\n *\n * ===================================\n */\n\n// admins\nRole adminRole = new Role(globalRoleAdmin, adminPermissionSet);\nroleBasedAuthenticationStrategy.addRole(RoleType.Global, adminRole);\n\n// builders\nRole buildersRole = new Role(globalBuildRole, buildPermissionSet);\nroleBasedAuthenticationStrategy.addRole(RoleType.Global, buildersRole);\n\n// anonymous read\nRole readRole = new Role(globalRoleRead, readPermissionSet);\nroleBasedAuthenticationStrategy.addRole(RoleType.Global, readRole);\n\n/**\n * ===================================\n *         \n *      Roles -> Groups/Users\n *\n * ===================================\n */\n\naccess.admins.each { l ->\n  println("Granting admin to ${l}")\n  roleBasedAuthenticationStrategy.assignRole(RoleType.Global, adminRole, l);  \n}\n\naccess.builders.each { l ->\n  println("Granting builder to ${l}")\n  roleBasedAuthenticationStrategy.assignRole(RoleType.Global, buildersRole, l);  \n}\n\naccess.readers.each { l ->\n  println("Granting read to ${l}")\n  roleBasedAuthenticationStrategy.assignRole(RoleType.Global, readRole, l);  \n}\n\nJenkins.instance.save()\n')),(0,t.kt)("h2",{id:"ldap-groups-roles"},(0,t.kt)("a",{parentName:"h2",href:"https://github.com/Accenture/adop-jenkins/blob/master/resources/init.groovy.d/role_based_auth.groovy"},"LDAP groups roles")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"https://www.google.es/search?q=groovy+enable+Role+Strategy+Plugin"},"https://www.google.es/search?q=groovy+enable+Role+Strategy+Plugin"))),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'import hudson.*\nimport hudson.model.*\nimport hudson.security.*\nimport jenkins.*\nimport jenkins.model.*\nimport java.util.*\nimport com.michelin.cio.hudson.plugins.rolestrategy.*\nimport java.lang.reflect.*\n\ndef env = System.getenv()\n\n// Roles\ndef globalRoleRead = "read"\ndef globalRoleAdmin = "admin"\ndef ldapGroupNameAdmin = env[\'LDAP_GROUP_NAME_ADMIN\'] ?: "administrators"\n\ndef jenkinsInstance = Jenkins.getInstance()\ndef currentAuthenticationStrategy = Hudson.instance.getAuthorizationStrategy()\n\nThread.start {\n    sleep 15000\n    if (currentAuthenticationStrategy instanceof RoleBasedAuthorizationStrategy) {\n      println "Role based authorisation already enabled."\n      println "Exiting script..."\n      return\n    } else {\n      println "Enabling role based authorisation strategy..."\n    }\n\n    // Set new authentication strategy\n    RoleBasedAuthorizationStrategy roleBasedAuthenticationStrategy = new RoleBasedAuthorizationStrategy()\n    jenkinsInstance.setAuthorizationStrategy(roleBasedAuthenticationStrategy)\n\n    Constructor[] constrs = Role.class.getConstructors();\n    for (Constructor<?> c : constrs) {\n      c.setAccessible(true);\n    }\n\n    // Make the method assignRole accessible\n    Method assignRoleMethod = RoleBasedAuthorizationStrategy.class.getDeclaredMethod("assignRole", String.class, Role.class, String.class);\n    assignRoleMethod.setAccessible(true);\n\n    // Create admin set of permissions\n    Set<Permission> adminPermissions = new HashSet<Permission>();\n    adminPermissions.add(Permission.fromId("hudson.model.View.Delete"));\n    adminPermissions.add(Permission.fromId("hudson.model.Computer.Connect"));\n    adminPermissions.add(Permission.fromId("hudson.model.Run.Delete"));\n    adminPermissions.add(Permission.fromId("hudson.model.Hudson.UploadPlugins"));\n    adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.ManageDomains"));\n    adminPermissions.add(Permission.fromId("hudson.model.Computer.Create"));\n    adminPermissions.add(Permission.fromId("hudson.model.View.Configure"));\n    adminPermissions.add(Permission.fromId("hudson.model.Hudson.ConfigureUpdateCenter"));\n    adminPermissions.add(Permission.fromId("hudson.model.Computer.Build"));\n    adminPermissions.add(Permission.fromId("hudson.model.Item.Configure"));\n    adminPermissions.add(Permission.fromId("hudson.model.Hudson.Administer"));\n    adminPermissions.add(Permission.fromId("hudson.model.Item.Cancel"));\n    adminPermissions.add(Permission.fromId("hudson.model.Item.Read"));\n    adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.View"));\n    adminPermissions.add(Permission.fromId("hudson.model.Computer.Delete"));\n    adminPermissions.add(Permission.fromId("hudson.model.Item.Build"));\n    adminPermissions.add(Permission.fromId("hudson.scm.SCM.Tag"));\n    adminPermissions.add(Permission.fromId("hudson.model.Item.Discover"));\n    adminPermissions.add(Permission.fromId("hudson.model.Hudson.Read"));\n    adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.Update"));\n    adminPermissions.add(Permission.fromId("hudson.model.Item.Create"));\n    adminPermissions.add(Permission.fromId("hudson.model.Item.Move"));\n    adminPermissions.add(Permission.fromId("hudson.model.Item.Workspace"));\n    adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.Delete"));\n    adminPermissions.add(Permission.fromId("hudson.model.View.Read"));\n    adminPermissions.add(Permission.fromId("hudson.model.Hudson.RunScripts"));\n    adminPermissions.add(Permission.fromId("hudson.model.View.Create"));\n    adminPermissions.add(Permission.fromId("hudson.model.Item.Delete"));\n    adminPermissions.add(Permission.fromId("hudson.model.Computer.Configure"));\n    adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.Create"));\n    adminPermissions.add(Permission.fromId("hudson.model.Computer.Disconnect"));\n    adminPermissions.add(Permission.fromId("hudson.model.Run.Update"));\n\n    // Create the admin Role\n    Role adminRole = new Role(globalRoleAdmin, adminPermissions);\n    roleBasedAuthenticationStrategy.addRole(RoleBasedAuthorizationStrategy.GLOBAL, adminRole);\n\n    // Assign the role\n    roleBasedAuthenticationStrategy.assignRole(RoleBasedAuthorizationStrategy.GLOBAL, adminRole, ldapGroupNameAdmin);\n    println "Admin role created...OK"\n\n    /// Read access for authenticated users\n    // Create permissions\n    Set<Permission> authenticatedPermissions = new HashSet<Permission>();\n    authenticatedPermissions.add(Permission.fromId("hudson.model.Hudson.Read"));\n    authenticatedPermissions.add(Permission.fromId("hudson.model.View.Read"));\n\n    Role authenticatedRole = new Role(globalRoleRead, authenticatedPermissions);\n    roleBasedAuthenticationStrategy.addRole(RoleBasedAuthorizationStrategy.GLOBAL, authenticatedRole);\n\n    // Assign the role\n    roleBasedAuthenticationStrategy.assignRole(RoleBasedAuthorizationStrategy.GLOBAL, authenticatedRole, \'authenticated\');\n    println "Read role created...OK"\n\n    // Save the state\n    println "Saving changes."\n    jenkinsInstance.save()\n}\n')),(0,t.kt)("h2",{id:"load-an-extra-jenkinsfile"},"Load an extra Jenkinsfile"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"https://github.com/NET-A-PORTER/jenkinsworld-2017-sample-app/blob/master/Jenkinsfile"},"Jenkinsworld 2017 sample app"),": Load a ",(0,t.kt)("inlineCode",{parentName:"li"},"path/Jenkinsfile")," inside a ",(0,t.kt)("inlineCode",{parentName:"li"},"Jenkinsfile"),".")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'node {\n    checkout scm\n\n    echo env.JENKINS_URL\n    if(env.JENKINS_URL ==~ /.*central-pipeline.*/) {\n        echo "loading central"\n        load "central/Jenkinsfile"\n    } else {\n        echo "loading local"\n        load "local/Jenkinsfile"\n    }\n}()\n')),(0,t.kt)("h2",{id:"groovy-file-check"},(0,t.kt)("a",{parentName:"h2",href:"https://stackoverflow.com/questions/39262999/groovy-file-check"},"Groovy file check")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"file.exists()")," to check if the file exists on the filesystem "),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"file.readable()")," to check if it can be read by the application."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"JSONSlurper")," to parse the file and catch ",(0,t.kt)("inlineCode",{parentName:"li"},"JSONException")," if the json is invalid:")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'import groovy.json.*\n\ndef filePath = "/tmp/file.json"\n\ndef file = new File(filePath)\n\nassert file.exists() : "file not found"\nassert file.canRead() : "file cannot be read"\n\ndef jsonSlurper = new JsonSlurper()\ndef object\n\ntry {\n  object = jsonSlurper.parse(file)\n} catch (JsonException e) {\n  println "File is not valid"\n  throw e\n}\n\nprintln object\n')),(0,t.kt)("p",null,'To pass the file path argument from the command line, replace def filePath = "/tmp/file.json" with'),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'assert args.size == 1 : "missing file to parse"\ndef filePath = args[0]\n')),(0,t.kt)("p",null,"and execute on the command line groovy parse.groovy ",(0,t.kt)("inlineCode",{parentName:"p"},"/tmp/file.json")),(0,t.kt)("h2",{id:"groovy-environment-vars"},(0,t.kt)("a",{parentName:"h2",href:"https://stackoverflow.com/questions/21236268/access-to-build-environment-variables-from-a-groovy-script-in-a-jenkins-build-st"},"Groovy environment vars")),(0,t.kt)("h3",{id:"general-enviornment-vars"},"General enviornment vars"),(0,t.kt)("p",null,"Vars like ",(0,t.kt)("inlineCode",{parentName:"p"},"BASE")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},'System.getenv("BASE")\n')),(0,t.kt)("h2",{id:"build-environment-vars"},"Build environment vars"),(0,t.kt)("p",null,"To get vars like ",(0,t.kt)("inlineCode",{parentName:"p"},"JOB_NAME")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"def myVar = build.getEnvironment(listener).get('myVar')\n")),(0,t.kt)("h2",{id:"jenkins-okcancel-button"},(0,t.kt)("a",{parentName:"h2",href:"https://support.cloudbees.com/hc/en-us/articles/226554067-Pipeline-How-to-add-an-input-step-with-timeout-that-continues-if-timeout-is-reached-using-a-default-value"},"Jenkins OK/Cancel button")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},"def userInput = true\ndef didTimeout = false\ntry {\n    timeout(time: 15, unit: 'SECONDS') { // change to a convenient timeout for you\n        userInput = input(\n        id: 'Proceed1', message: 'Was this successful?', parameters: [\n        [$class: 'BooleanParameterDefinition', defaultValue: true, description: '', name: 'Please confirm you agree with this']\n        ])\n    }\n} catch(err) { // timeout reached or input false\n    def user = err.getCauses()[0].getUser()\n    if('SYSTEM' == user.toString()) { // SYSTEM means timeout.\n        didTimeout = true\n    } else {\n        userInput = false\n        echo \"Aborted by: [${user}]\"\n    }\n}\n\nnode {\n    if (didTimeout) {\n        // do something on timeout\n        echo \"no input was received before timeout\"\n    } else if (userInput == true) {\n        // do something\n        echo \"this was successful\"\n    } else {\n        // do something else\n        echo \"this was not successful\"\n        currentBuild.result = 'FAILURE'\n    }\n}\n")))}u.isMDXComponent=!0}}]);