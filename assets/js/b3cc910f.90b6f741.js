"use strict";(self.webpackChunkgolden_forest_website=self.webpackChunkgolden_forest_website||[]).push([[5090],{46979:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>u});var n=s(87462),i=(s(67294),s(3905));s(61839);const l={},r="Unit testing",a={unversionedId:"Shell-Script/bash-unit-testing",id:"Shell-Script/bash-unit-testing",title:"Unit testing",description:"Sample script",source:"@site/docs/Shell-Script/bash-unit-testing.md",sourceDirName:"Shell-Script",slug:"/Shell-Script/bash-unit-testing",permalink:"/docs/Shell-Script/bash-unit-testing",draft:!1,editUrl:"https://github.com/sdelrio/golden-forest/edit/master/docs/Shell-Script/bash-unit-testing.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"OWASP",permalink:"/docs/Security/owasp"},next:{title:"Charm.sh",permalink:"/docs/Shell-Script/charm"}},c={},u=[{value:"Sample script",id:"sample-script",level:2},{value:"Dockerfile runtime",id:"dockerfile-runtime",level:2},{value:"Test script",id:"test-script",level:2},{value:"Dockerfile.test",id:"dockerfiletest",level:2},{value:"References",id:"references",level:2}],o={toc:u},p="wrapper";function h(e){let{components:t,...s}=e;return(0,i.kt)(p,(0,n.Z)({},o,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"unit-testing"},"Unit testing"),(0,i.kt)("h2",{id:"sample-script"},"Sample script"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\n\nAMOUNT=$(ls crashdump | wc -l)\n\nif [[ AMOUNT -ge 3 ]]; then\n  mail -s \u201cAlert: Too many files: $AMOUNT\u201d alerts@toomanycrashes.com\nfi\n")),(0,i.kt)("h2",{id:"dockerfile-runtime"},"Dockerfile runtime"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'FROM debian:stretch-slim\n\nRUN mkdir /script\nCOPY script.sh /script/script.sh\nRUN chmod +x /script/script.sh\n\nENTRYPOINT [ "/script/script.sh" ]\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Build image")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker build -t scriptimage:latest .\n")),(0,i.kt)("h2",{id:"test-script"},"Test script"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\nshopt -s expand_aliases\n\n# Execute before all tests\nalias mail="echo \'alert send\' > output;false"\necho \'Test results for our image/script\' > results.txt\ncount=0\n\n# test 1 (less than or equal)\n# Execute before test 1\nalias ls="echo -e \'file1\\nfile2\'"\necho \'No output\' > output\n\n# Run script\n. /script/script.sh\n\n# Check result (assert)\n((count=count+1))\nif [[ $(< output) == \'alert send\' ]]; then\n  echo "$count. FAIL: Alert mail send while less than three files" >> results.txt\nelse\n  echo "$count. PASS: Alert mail not send" >> results.txt\nfi\n\n# Prepare test 2 (greater than or equal)\nalias ls="echo -e \'file1\\nfile2\\nfile3\\nfile4\'"\necho \'No output\' > output\n\n# Run script\n. /script/script.sh\n\n# Check result (assert)\n((count=count+1))\nif [[ $(< output) == \'alert send\' ]]; then\n  echo "$count. PASS: Alert mail send" >> results.txt\nelse\n  echo "$count. FAIL: Did not send Alert mail" >> results.txt\nfi\n\n# After all\nunalias ls\nunalias mail\n\n# Display test results\ncat results.txt\n\n# Return exit 1 if FAIL found\nif grep -q "FAIL" results.txt; then\n  echo "exiting with exit 1"\n  exit 1\nfi\n\n')),(0,i.kt)("h2",{id:"dockerfiletest"},"Dockerfile.test"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'FROM scriptimage:latest\n\nCOPY test.sh /script/test.sh\nRUN chmod +x /script/test.sh\n\nENTRYPOINT [ "/script/test.sh" ]\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Build & run test image")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker build -t unittest:latest -f Dockerfile.test .\ndocker run unittest:latest\n")),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.flowfactor.be/unit-testing-bash-scripts-the-cloud-native-way/"},"Unit testing bash scripts the cloud-native way"))))}h.isMDXComponent=!0}}]);