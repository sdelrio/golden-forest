"use strict";(self.webpackChunkgolden_forest_website=self.webpackChunkgolden_forest_website||[]).push([[1102],{9210:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=t(7462),s=(t(7294),t(3905));t(1839);const r={},i="Jenkinsfile React app",o={unversionedId:"DevOps/CI/Platforms/Jenkins/Jenkinsfile-react",id:"DevOps/CI/Platforms/Jenkins/Jenkinsfile-react",title:"Jenkinsfile React app",description:"* Continuous delivery of react app with Jenkins and Docker",source:"@site/docs/DevOps/CI/Platforms/Jenkins/Jenkinsfile-react.md",sourceDirName:"DevOps/CI/Platforms/Jenkins",slug:"/DevOps/CI/Platforms/Jenkins/Jenkinsfile-react",permalink:"/docs/DevOps/CI/Platforms/Jenkins/Jenkinsfile-react",draft:!1,editUrl:"https://github.com/sdelrio/golden-forest/edit/master/docs/DevOps/CI/Platforms/Jenkins/Jenkinsfile-react.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Jenkinsfile node app",permalink:"/docs/DevOps/CI/Platforms/Jenkins/Jenkinsfile-node"},next:{title:"Jenkins Chaos engineering",permalink:"/docs/DevOps/CI/Platforms/Jenkins/jenkins-chaos-engineering"}},p={},c=[{value:"Jenkinsfile",id:"jenkinsfile",level:2},{value:"Dockerfile",id:"dockerfile",level:2},{value:"Dockerfile.test",id:"dockerfiletest",level:2}],l={toc:c},k="wrapper";function d(e){let{components:n,...t}=e;return(0,s.kt)(k,(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"jenkinsfile-react-app"},"Jenkinsfile React app"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://hackernoon.com/continuous-delivery-of-react-app-with-jenkins-and-docker-8a1ae1511b86"},"Continuous delivery of react app with Jenkins and Docker"))),(0,s.kt)("h2",{id:"jenkinsfile"},"Jenkinsfile"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-groovy"},"node {\n  try {\n    stage('Checkout') {\n      checkout scm\n    }\n    stage('Environment') {\n      sh 'git --version'\n      echo \"Branch: ${env.BRANCH_NAME}\"\n      sh 'docker -v'\n      sh 'printenv'\n    }\n    stage('Build Docker test'){\n     sh 'docker build -t react-test -f Dockerfile.test --no-cache .'\n    }\n    stage('Docker test'){\n      sh 'docker run --rm react-test'\n    }\n    stage('Clean Docker test'){\n      sh 'docker rmi react-test'\n    }\n    stage('Deploy'){\n      if(env.BRANCH_NAME == 'master'){\n        sh 'docker build -t react-app --no-cache .'\n        sh 'docker tag react-app localhost:5000/react-app'\n        sh 'docker push localhost:5000/react-app'\n        sh 'docker rmi -f react-app localhost:5000/react-app'\n      }\n    }\n  }\n  catch (err) {\n    throw err\n  }\n}\n")),(0,s.kt)("h2",{id:"dockerfile"},"Dockerfile"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-docker"},'# Extending image\nFROM node:carbon\n\nRUN apt-get update\nRUN apt-get upgrade -y\nRUN apt-get -y install autoconf automake libtool nasm make pkg-config git apt-utils\n\n# Create app directory\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\n\n# Versions\nRUN npm -v\nRUN node -v\n\n# Install app dependencies\nCOPY package.json /usr/src/app/\nCOPY package-lock.json /usr/src/app/\n\nRUN npm install\n\n# Bundle app source\nCOPY . /usr/src/app\n\n# Port to listener\nEXPOSE 3000\n\n# Environment variables\nENV NODE_ENV production\nENV PORT 3000\nENV PUBLIC_PATH "/"\n\nRUN npm run start:build\n\n# Main command\nCMD [ "npm", "run", "start:server" ]\n')),(0,s.kt)("h2",{id:"dockerfiletest"},"Dockerfile.test"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dockerfile"},'# Extending image\nFROM node:carbon\n\nRUN apt-get update\nRUN apt-get upgrade -y\nRUN apt-get -y install autoconf automake libtool nasm make pkg-config git apt-utils\n\n# Create app directory\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\n\n# Versions\nRUN npm -v\nRUN node -v\n\n# Install app dependencies\nCOPY package.json /usr/src/app/\nCOPY package-lock.json /usr/src/app/\n\nRUN npm install\n\n# Bundle app source\nCOPY . /usr/src/app\n\n# Environment variables\nENV NODE_ENV test\n\n# Main command\nCMD [ "npm", "test" ]\n')))}d.isMDXComponent=!0}}]);