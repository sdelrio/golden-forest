"use strict";(self.webpackChunkgolden_forest_website=self.webpackChunkgolden_forest_website||[]).push([[706],{9241:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>k,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var s=t(7462),i=(t(7294),t(3905));t(1839);const r={},o="Jenkinsfile node app",a={unversionedId:"DevOps/CI/Platforms/Jenkins/Jenkinsfile-node",id:"DevOps/CI/Platforms/Jenkins/Jenkinsfile-node",title:"Jenkinsfile node app",description:"* Set up Jenkins CI in Docker Container & Run Your Tests Inside Their Own Container A How-To Guide",source:"@site/docs/DevOps/CI/Platforms/Jenkins/Jenkinsfile-node.md",sourceDirName:"DevOps/CI/Platforms/Jenkins",slug:"/DevOps/CI/Platforms/Jenkins/Jenkinsfile-node",permalink:"/docs/DevOps/CI/Platforms/Jenkins/Jenkinsfile-node",draft:!1,editUrl:"https://github.com/sdelrio/golden-forest/edit/master/docs/DevOps/CI/Platforms/Jenkins/Jenkinsfile-node.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Groovy scripts",permalink:"/docs/DevOps/CI/Platforms/Jenkins/Groovy-start-scripts"},next:{title:"Jenkinsfile React app",permalink:"/docs/DevOps/CI/Platforms/Jenkins/Jenkinsfile-react"}},p={},l=[],d={toc:l},c="wrapper";function k(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,s.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"jenkinsfile-node-app"},"Jenkinsfile node app"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://hackernoon.com/set-up-jenkins-ci-in-docker-container-and-run-your-tests-inside-their-own-container-a-how-to-guide-7h8u32yi"},"Set up Jenkins CI in Docker Container & Run Your Tests Inside Their Own Container A How-To Guide"))),(0,i.kt)("h1",{id:"jenkinsfile"},"Jenkinsfile"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-groovy"},'pipeline {\n    environment {\n        // This registry is important for removing the image after the tests \n        registry = "yourname/nodeapp"\n    }\n    agent any\n    stages {\n        stage("Test") {\n            steps {\n                script { // Building the Docker image \n                dockerImage = docker.build registry + ":$BUILD_NUMBER" \n                try {\n                    dockerImage.inside() {\n                        // Extracting the PROJECTDIR environment variable from inside the container \n                        def PROJECTDIR = sh(script: \'echo \\$PROJECTDIR\', returnStdout: true).trim()\n                        // Copying the project into our workspace\n                        sh "cp -r \'$PROJECTDIR\' \'$WORKSPACE\'"\n                        // Running the tests inside the new directory \n                        dir("$WORKSPACE$PROJECTDIR") { sh "npm test" }\n                    }\n                } finally {\n                    // Removing the docker image \n                    sh "docker rmi $registry:$BUILD_NUMBER"\n                }\n            }\n        }\n    }\n}\n\n')),(0,i.kt)("h1",{id:"dockerfile"},"Dockerfile"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dockerfile"},'FROM node:latest\n\nENV PROJECTDIR /nodeApp\n\nWORKDIR $PROJECTDIR\n\nCOPY package*.json ./\n\nRUN npm install\n\nCOPY . .\n\nEXPOSE 3000\n\nCMD ["npm", "start"]\n')),(0,i.kt)("h1",{id:"appjs"},"app.js"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const express = require("express");\nconst app = express();\nconst port =  process.env.PORT || 3000;\n\napp.get(\'/\', (req, res) => {\n    res.status(200);\n    res.send("Cool beans");\n});\n\napp.listen(port, () => {\n    console.log(`App is up and listening on port ${port}`);\n});\n\nmodule.exports = app;\n')))}k.isMDXComponent=!0}}]);