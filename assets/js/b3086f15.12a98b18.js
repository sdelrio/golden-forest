"use strict";(self.webpackChunkgolden_forest_website=self.webpackChunkgolden_forest_website||[]).push([["865"],{86980:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>a,default:()=>u,toc:()=>c,metadata:()=>s,assets:()=>o,contentTitle:()=>i});var s=JSON.parse('{"id":"Cloud-Platform/Kubernetes/k8s-tunnels","title":"Tunnels","description":"Inlets","source":"@site/docs/Cloud-Platform/Kubernetes/k8s-tunnels.md","sourceDirName":"Cloud-Platform/Kubernetes","slug":"/Cloud-Platform/Kubernetes/k8s-tunnels","permalink":"/docs/Cloud-Platform/Kubernetes/k8s-tunnels","draft":false,"unlisted":false,"editUrl":"https://github.com/sdelrio/golden-forest/edit/master/docs/Cloud-Platform/Kubernetes/k8s-tunnels.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"K8s tools","permalink":"/docs/Cloud-Platform/Kubernetes/k8s-tools"},"next":{"title":"Coding","permalink":"/docs/category/coding"}}'),r=t(85893),l=t(50065);let a={},i="Tunnels",o={},c=[{value:"Inlets",id:"inlets",level:2},{value:"Sample install",id:"sample-install",level:3},{value:"External node",id:"external-node",level:4},{value:"Client part",id:"client-part",level:4},{value:"References",id:"references",level:3}];function d(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"tunnels",children:"Tunnels"})}),"\n",(0,r.jsx)(n.h2,{id:"inlets",children:"Inlets"}),"\n",(0,r.jsx)(n.h3,{id:"sample-install",children:"Sample install"}),"\n",(0,r.jsx)(n.p,{children:"Situation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"1 external node in the cloud"}),"\n",(0,r.jsx)(n.li,{children:"1 external domain mytunnel.mydomain.com"}),"\n",(0,r.jsx)(n.li,{children:"1 internal cluster in the LAN"}),"\n",(0,r.jsx)(n.li,{children:"1 port redirect to 1 internal LAN cluster IP, in this sample: 192.168.1.140"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"external-node",children:"External node"}),"\n",(0,r.jsx)(n.p,{children:"For this test a k3s aruba node was used"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'export token=$(head -c 16 /dev/urandom | shasum | cut -d" " -f1)\necho $token > lasttoken.txt\ninlets server --port=8800 --token="$token"\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Crear random token:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'export token=$(head -c 16 /dev/urandom | shasum | cut -d" " -f1)\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Add token to k8s secrets:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"kubectl create secret generic inlets --from-literal=TOKEN=$token\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"inlets.yaml"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: inlets\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: inlets\n  template:\n    metadata:\n      labels:\n        app: inlets\n    spec:\n      containers:\n      - name: inlets\n        image: alexellis2/inlets:2.2.0\n        command:\n          - "inlets"\n          - "server"\n          - "--port=8000"\n          - "--token=$(TOKEN)"\n#          - "--print-token=false"\n        resources:\n          limits:\n            cpu: 250m\n            memory: 16Mi\n          requests:\n            cpu: 150m\n            memory: 16Mi\n        env:\n          - name: TOKEN\n            valueFrom:\n              secretKeyRef:\n                name: inlets\n                key: TOKEN\n        ports:\n        - containerPort: 8000\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: inlets-svc\nspec:\n  ports:\n  - port: 80\n    targetPort: 8000\n    protocol: TCP\n    name: http\n  selector:\n    app: inlets\n---\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: inlets-ingress\n  annotations:\n    kubernetes.io/ingress.class: traefik\n#    ingress.kubernetes.io/ssl-redirect: "true"\n#  ingress.kubernetes.io/ssl-redirect: "true"\n#  annotations:\n#   ingress.kubernetes.io/auth-type: "basic"\n#   ingress.kubernetes.io/auth-secret: "mysecret"\nspec:\n#  tls:\n#  - hosts:\n#    - mytunnel.mydomain.com\n##    secretName: inlets-secret\n  rules:\n  - host: mytunnel.mydomain.com\n    http:\n      paths:\n      - path: /\n        backend:\n          serviceName: inlets-svc\n          servicePort: 80\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Traefik config:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"root@fr1elvs01:~/inlets# cat /var/lib/rancher/k3s/server/manifests/traefik.yaml\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'\napiVersion: helm.cattle.io/v1\nkind: HelmChart\nmetadata:\n  name: traefik\n  namespace: kube-system\nspec:\n  chart: https://%{KUBERNETES_API}%/static/charts/traefik-1.77.1.tgz\n  set:\n    rbac.enabled: "true"\n    ssl.enabled: "true"\n    acme.enabled: "true"\n    acme.persistence.enabled: "true"\n    acme.logging: "true"\n    acme.staging: "false"\n    acme.caServer: "https://acme-v02.api.letsencrypt.org/directory"\n    acme.email: "daranduil@protonmail.com"\n    acme.challengeType: "tls-alpn-01"\n    metrics.prometheus.enabled: "true"\n    kubernetes.ingressEndpoint.useDefaultPublishedService: "true"\n    dashboard.enabled: "true"\n    dashboard.domain: "myapp.mydomain.com"\n    dashboard.auth.basic.test: "$apr1$cIbpWQ.R$0CabcdaYieEW5m123456/"\n    externalTrafficPolicy: "Local"\n#    acme.challengeType: "http-01"\n#    acme.persistence.size:\n#    acme.persistence.existingClaim:\n#    forwardedHeaders.enabled: "true"\n#    forwardedHeaders.trustedIPs: ["0.0.0.0/0"]\n#    proxyProtocol.enabled: "false"\n#    proxyProtocol.enabled: "true"\n#    forwardAuth.trustForwardHeader:\n'})}),"\n",(0,r.jsx)(n.h4,{id:"client-part",children:"Client part"}),"\n",(0,r.jsx)(n.p,{children:"In local LAN cluster"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:' $ cat inlets_client.yaml\n#export REMOTE="wss://mytunnel.mydomain.com"    # for testing inlets on your laptop, replace with the public IPv4\n#export TOKEN="$token"  # the client token is found on your VPS or on start-up of "inlets server"\n#inlets client \\\n#    --remote=$REMOTE \\\n#    --upstream=https://192.168.1.140:443 \\\n#    --token $TOKEN \\\n#    --print-token=false\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: inlets\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: inlets\n  template:\n    metadata:\n      labels:\n        app: inlets\n    spec:\n      containers:\n      - name: inlets\n        image: alexellis2/inlets:2.2.0\n        command:\n          - "inlets"\n          - "client"\n          - "--remote=wss://mytunnel.mydomain.com"\n          - "--upstream=https://192.168.1.140:443"\n          - "--token=$toke"\n          - "--print-token=false"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"references",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://blog.heyal.co.uk/inlets-pro/",children:"Exploring NAT Traversal and Tunnels with Inlets and Inlets Pro"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nginx-ingress-on-digitalocean-kubernetes-using-helm",children:"How To Set Up an Nginx Ingress on DigitalOcean Kubernetes Using Helm\nNginxSecurityLet's EncryptKubernetes"})}),"\n"]})]})}function u(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},50065:function(e,n,t){t.d(n,{Z:()=>i,a:()=>a});var s=t(67294);let r={},l=s.createContext(r);function a(e){let n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);