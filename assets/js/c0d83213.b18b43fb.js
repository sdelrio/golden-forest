"use strict";(self.webpackChunkgolden_forest_website=self.webpackChunkgolden_forest_website||[]).push([[8803],{25824:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(87462),i=(n(67294),n(3905));n(61839);const o={},a="Docker tag",s={unversionedId:"Containers/Docker/docker-tag",id:"Containers/Docker/docker-tag",title:"Docker tag",description:"Based on git commit",source:"@site/docs/Containers/Docker/docker-tag.md",sourceDirName:"Containers/Docker",slug:"/Containers/Docker/docker-tag",permalink:"/docs/Containers/Docker/docker-tag",draft:!1,editUrl:"https://github.com/sdelrio/golden-forest/edit/master/docs/Containers/Docker/docker-tag.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Docker registry",permalink:"/docs/Containers/Docker/docker-registry"},next:{title:"Docker for windows",permalink:"/docs/Containers/Docker/docker-windows"}},l={},c=[{value:"Based on git commit",id:"based-on-git-commit",level:2},{value:"Makefile",id:"makefile",level:3},{value:"Version + commit + date",id:"version--commit--date",level:2},{value:"Version based on a file content diff",id:"version-based-on-a-file-content-diff",level:2},{value:"ci-version",id:"ci-version",level:2},{value:"References",id:"references",level:2}],d={toc:c},m="wrapper";function g(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"docker-tag"},"Docker tag"),(0,i.kt)("h2",{id:"based-on-git-commit"},"Based on git commit"),(0,i.kt)("p",null,"Very useful for integration/staging environments or any automated release."),(0,i.kt)("p",null,"Get the latest commit of your repo and use as the tag"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Long version",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ git log -1 --pretty=%H\na4b31e3966d51716e0a5794daed664208194c65e\n"))),(0,i.kt)("li",{parentName:"ul"},"Short version",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ git log -1 --pretty=%h\na4b31e3\n")))),(0,i.kt)("h3",{id:"makefile"},"Makefile"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"NAME   := your_org/your_app\nTAG    := $$(git log -1 --pretty=%!H)\nIMG    := ${NAME}:${TAG}\nLATEST := ${NAME}:latest\n\nbuild:\n  @docker build -t ${IMG} .\n  @docker tag ${IMG} ${LATEST}\n\npush:\n  @docker push ${NAME}\n\nlogin:\n  @docker log -u ${DOCKER_USER} -p ${DOCKER_PASS}\n")),(0,i.kt)("h2",{id:"version--commit--date"},"Version + commit + date"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# version based on git tag\nTAG_COMMIT := $(shell git rev-list --abbrev-commit --tags --max-count=1)\n# `2>/dev/null` suppress errors and `|| true` suppress the error codes.\nTAG := $(shell git describe --abbrev=0 --tags ${TAG_COMMIT} 2>/dev/null || true)\n# get the latest commit hash in the short form\nCOMMIT := $(shell git rev-parse --short HEAD)\n# get the latest commit date in the form of YYYYmmdd\nDATE := $(shell git log -1 --format=%cd --date=format:"%Y%m%d")\n# strip version prefix "v"\nVERSION := $(TAG:v%=%)\n# Deal with nightly builds that appeared after a particular\nversion\nifneq ($(COMMIT), $(TAG_COMMIT))\n  VERSION := $(VERSION)-next-$(COMMIT)-$(DATE)\nendif\n# Check if the version string is empty\nifeq $(VERSION,)\n  VERSION := $(COMMIT)-$(DATA)\nendif\n# git status --porcelain outputs a machine-readable text and the output is empty\n# if the working tree is clean\nifneq ($(shell git status --porcelain),)\n  VERSION := $(VERSION)-dirty\nendif\n')),(0,i.kt)("h2",{id:"version-based-on-a-file-content-diff"},"Version based on a file content diff"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"check_version_changes(){\n    git diff  $(git describe --tags --abbrev=0 HEAD)..HEAD -- mymodule/__init__.py | grep --quiet +__version__;\n};\n\n\nif ! check_version_changes; then\n    echo \"Version not changed\"\n    exit 0\nfi\n\nVERSION=$(python -c 'import forwarder; print(mymodule.__version__)')\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/pando85/alertmanager-telegram-forwarder/blob/master/.ci/tag_version.sh"},"https://github.com/pando85/alertmanager-telegram-forwarder/blob/master/.ci/tag_version.sh")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/pando85/aiofunctools/blob/master/.ci/tag_version.sh"},"https://github.com/pando85/aiofunctools/blob/master/.ci/tag_version.sh"))),(0,i.kt)("h2",{id:"ci-version"},"ci-version"),(0,i.kt)("p",null,"With Docker:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --rm -v /path/to/my/repository:/repo:ro softonic/ci-version\n#> 1.2.0\ndocker run --rm -v /path/to/my/repository:/repo:ro softonic/ci-version --compatible-with package.json\n#> 1.2.0\ndocker run --rm -v /path/to/my/repository:/repo:ro softonic/ci-version --compatible-with composer.json\n#> 1.2.0\n")),(0,i.kt)("p",null,"CLI program to determine new versions in CI projects "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/softonic/ci-version"},"https://github.com/softonic/ci-version"))),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://blog.container-solutions.com/tagging-docker-images-the-right-way"},"Tagging docker images the right way")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://blog.scottlowe.org/2017/11/08/how-tag-docker-images-git-commit-information/"},"How to Tag Docker Images with Git Commit Information")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://dev.to/eugenebabichenko/generating-pretty-version-strings-including-nightly-with-git-and-makefiles-48p3"},"Generating pretty version strings (including nightly) with Git and Makefiles")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://eugene-babichenko.github.io/blog/2019/09/28/nightly-versions-makefiles/"},"Generating pretty version strings (including nightly) with Git and Makefiles"))))}g.isMDXComponent=!0}}]);